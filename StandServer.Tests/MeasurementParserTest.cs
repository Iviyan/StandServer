using StandServer.Controllers;
using StandServer.Models;

namespace StandServer.Tests;

public class MeasurementParserTest
{
    [Theory]
    [InlineData("", null)]
    [InlineData("00000123 12:01 01.01.2023|0:01| 10|39|50|7213|1000| 50| 10|10000|W",
        "00000123 12:01:00 01.01.2023|00:01:00|10|39|50|7213|1000|50|10|10000|W")]
    [InlineData("123 12:01 01.01.2023|0:01| 10|39|50|7213|1000| 50| 10|10000|W",
        "00000123 12:01:00 01.01.2023|00:01:00|10|39|50|7213|1000|50|10|10000|W")]
    [InlineData("00000123 12:01:12 01.01.2023|0:01| 10|39|50|7213|1000| 50| 10|10000|W",
        "00000123 12:01:12 01.01.2023|00:01:00|10|39|50|7213|1000|50|10|10000|W")]
    [InlineData("00000123 12:01 01.01.2023|0:01:12| 10|39|50|7213|1000| 50| 10|10000|W",
        "00000123 12:01:00 01.01.2023|00:01:12|10|39|50|7213|1000|50|10|10000|W")]
    [InlineData("-0000123 12:01 01.01.2023|0:01:12| 10|39|50|7213|1000| 50| 10|10000|W",
        "-00000123 12:01:00 01.01.2023|00:01:12|10|39|50|7213|1000|50|10|10000|W")]
    [InlineData("00000123 12:01 01.01.2023|0:01| 10 |  39 |  50   | 7213 | 1000 | 50 | 10 | 10000 |W",
        "00000123 12:01:00 01.01.2023|00:01:00|10|39|50|7213|1000|50|10|10000|W")]
    [InlineData("00000123 12:01 01.01.2023|0:01:12|10|39|50|7213|1000|50|10|10000| W", 
        "00000123 12:01:00 01.01.2023|00:01:12|10|39|50|7213|1000|50|10|10000|W")]
    [InlineData("00000123 12:01: 01.01.2023|0:01:12|10|39|50|7213|1000|50|10|10000|W", null)]
    [InlineData("00000123 12:000 01.01.2023|0:01:12|10|39|50|7213|1000|50|10|10000|W", null)]
    [InlineData("00000123 12 01.01.2023|0:01:12|10|39|50|7213|1000|50|10|10000|W", null)]
    [InlineData("00000123 01.01.2023|0:01:12|10|39|50|7213|1000|50|10|10000|W", null)]
    [InlineData("00000123 12:01 01.13.2023|0:01:12|10|39|50|7213|1000|50|10|10000|W", null)]
    [InlineData("00000123 12:01 01.01.2023|0:01:12:01|10|39|50|7213|1000|50|10|10000|W", null)]
    [InlineData("00000123 12:01 01.01.2023|0:|10|39|50|7213|1000|50|10|10000|W", null)]
    [InlineData("00000123 12:01 01.01.2023|10|39|50|7213|1000|50|10|10000|W", null)]
    [InlineData("00000123 12:01 01.01.2023|0:01:12|39|50|7213|1000|50|10|10000|W", null)]
    [InlineData("00000123 12:01 01.01.2023|0:01:12|10/39|50|7213|1000|50|10|10000|W", null)]
    [InlineData("00000123 12:01 01.01.2023|0:01:12|10|39|50|7213|1000|50|10|10000|S", null)]
    [InlineData("00000123 12:01 01.01.2023|0:01:12|32768|39|50|7213|1000|50|10|10000|W", null)]
    [InlineData("00000123 12:01 01.01.2023|0:01:12|32767|30|39|50|7213|1000|50|10|10000|W", null)]
    [InlineData("00000123 12:01 01.01.2023|0:01:12|32a|39|50|7213|1000|50|10|10000|W", null)]
    public void Test(string rawMeasurement, string? result)
    {
        var measurement = DataController.ParseRawMeasurement(rawMeasurement);
        string? measurementString = measurement == null ? null : GetMeasurementString(measurement);
        
        Assert.Equal(measurementString, result);
    }
    
    static string GetMeasurementString(Measurement m)
        => $"{m.SampleId:D8} {m.Time.ToLocalTime():HH:mm:ss dd.MM.yyyy}|{SecondsToInterval(m.SecondsFromStart)}|{m.DutyCycle}|" +
           $"{m.T}|{m.Tu}|{m.I}|{m.Period}|{m.Work}|{m.Relax}|{m.Frequency}|{m.State.ToString("G")[0]}";

    static string SecondsToInterval(int s) => $"{(s / 60 / 60).ToString().PadLeft(2, '0')}" +
                                              $":{(s / 60 % 60).ToString().PadLeft(2, '0')}" +
                                              $":{(s % 60).ToString().PadLeft(2, '0')}";
}